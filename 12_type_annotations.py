# python是弱类型语言
# 但类型注释可以提高代码的可读性 减少bug的可能
# 以及让`IDE(集成开发环境 VSCode就是一种IDE)`自动提示
# 所以一定的类型注释是很好的习惯

# 定义一个函数，它接受两个整数类型，返回它们的和
def add(a: int, b: int) -> int:
    return a + b
# 你看 我在定义时 参数后面加了一个`:`后面跟了一个类型名称，返回值后面加了一个`->`后面跟了一个类型名称
# 这就是简单的类型注释
# 他告诉开发者和`IDE`
# add函数的两个参数都是整数类型，返回值也是整数类型
# 如果我们传入的参数不是整数类型，那么`IDE`会提示有错误

# add("1", "2") # 取消这行前面的#，会看到IDE的错误警告

# 类型注释很多情况下都会用到`typing`模块
# 它加强了类型注释的能力
# 还提供了`泛型`等静态语言的功能
# 定义一个函数，打印提供的字符串，并在打印后执行一个`回调函数`
# `回调函数(Callback)`是一个函数，它被作为参数传递给另一个函数，然后在功能函数执行后调用
# 对应的在之前调用的叫`前置函数(Pre-function)`
# 我们引入`typing`模块，并使用其中的`Callable`类型
from typing import Callable
# 关于模块和模块的引用等到后面学完`class`后专门详细讲述

def print_and_call(s: str, callback: Callable) -> None:
    print(s)
    callback()

print_and_call("hello", lambda: print("world"))

# 定义(初始化)变量时，也可以进行类型注释
a: int = 1

# python是弱类型的
# 所以如果我们进行类型注释，虽然ide会有提示错误
# 但如果出入的参数是可以兼容的，那么程序也会运行
def addition(a: int, b: int) -> int:
    return a + b

# addition("hello", "world") # 这一行取消注释后，虽然会报错，但是你按下F5运行程序，程序也能正常运行

# 类型注释之所以叫`注释` 就意味着它实际上不参与程序运行，只是作为注释来提醒开发者和`IDE`
# 所以类型注释并不是强制的，但是它还是有价值的