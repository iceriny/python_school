# 啊，终于到条件语句了~
# 程序之所以是程序
# 就是它可以进行判断
# 条件达成了执行下面的逻辑， 没有达成则执行另外的逻辑(或跳过)
# 这就是条件语句的作用
# python的条件语句十分简单：
# 首先知道三个关键词 `if` `elif` `else`

# 它的基本语法是:
'''
if 条件1:
    逻辑1...
elif 条件2:
    逻辑2...
else:
    逻辑3...
'''
# 上述可以理解为
# 如果 `条件1` 为真(True)
# 则执行`逻辑1...`
# 如果`条件1` 为假(False)
# 则判断`条件2` 是否成立
# 如果成立则执行`逻辑2...`
# 如果`条件1`和`条件2`都不成执行`逻辑3...`

# 来看一个例子
# 判断一个数是奇数还是偶数
a = 3
if a % 2 == 0:
    print('%d是偶数' % a)
elif a % 2 == 1:
    print('%d是奇数' % a)
else:
    print('%d既不是奇数也不是偶数' % a)
# 你可以更改`a`的值，来试试这些逻辑怎么运行

# 判断语句可以嵌套
# 也就是说你可以在`if`语句中再写一个`if`语句
# 来看一个判断是不是闰年的例子
# tips: 闰年条件是：
# 公历年份是4的倍数，且不是100的倍数的，为闰年（如2004年、2020年等就是闰年）。
# 公历年份是整百数的，必须是400的倍数才是闰年（如1900年不是闰年，2000年是闰年）。
# 即:
# 1. 能被4整除
# 2. 不能被100整除
# 3. 能被400整除
year = 2019
if year % 4 == 0: # 如果能被4整除
    if year % 100 == 0: # 如果能被100整除 (注意这时候已经是在`能被4整除`的条件下，这里的判断的完整含义就是`能被4整除，也能被100整除`)
        if year % 400 == 0: # 如果能被100整除，则判断是否能被400整除
            print('%d年是闰年' % year)
        else:
            print('%d年不是闰年' % year)
    else: # 如果不能被100整除(注意这时候已经是在`能被4整除`的条件下，这里的判断的完整含义就是`能被4整除，但不能被100整除`)
        print('%d年是闰年' % year)
else: # 如果不能被4整除
    print('%d年不是闰年' % year)


# 除了`if` 语句，还有`match...case`语句
# 它是python3.10新增的，在3.10之前，python没有这个语句
# 它的语法是:
'''
match 条件依据:
    case 条件1:
        逻辑1...
    case 条件2:
        逻辑2...
    case _:
        逻辑3...
'''
# 它的含义是
# 如果 `条件` 满足 `条件1`，则执行`逻辑1...`
# 如果 `条件` 满足 `条件2`，则执行`逻辑2...`
# 如果 `条件` 都不满足，则执行`逻辑3...`
# `_` 是一个特殊的变量，它表示任何值，它相当于`else`
# 举个例子:
a = 3
match a:
    case 1:
        print('a等于1')
    case 2:
        print('a等于2')
    case _:
        print('a既不是1也不是2')