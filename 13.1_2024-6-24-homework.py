'''
使用 蒙特卡洛方法 计算圆周率的近似值

tips:
蒙特卡洛方法
指，随机抽样 或 统计实验 的数值计算方法。

思路提示:
画一个圆，在圆的外面画一个外切正方形
然后随机在正方形中取点，然后 在圆内的点和全部点的比值，就是 正方形面积和圆面积的比值
我们知道正方形面积公式是 l*l(边长*边长)
圆的面积公式是 π*r*r
因为是圆是正方形的内切圆
所以圆的半径等于正方形边长的一半，或者说圆的直径等于正方形的边长
所以如果只用r表示，正方形的面积公式就是 2r*2r = 4r*r
所以圆的面积和正方形面积的比值就是 4r*r / π*r*r = 4/π
'''

# 生成随机数需要导入random库
from random import random
# 生成一个0-1之间的随机浮点数的方法 `random()`

# 要求:

# 创建一个函数，
# 用来生成随机点
# 返回一个元组，
# 表示一个在边长为1的正方形内的随机点，
# 元组的成员是(x,y)

# 创建一个函数，
# 函数接受两个参数`x, y`，
# 表示点的坐标，
# 判断是否在一个半径为1的圆内，
# 如果是，返回True，否则返回False

# 创建一个函数，
# 接受一个整数类型表示总的随机次数，
# 返回一个浮点数，
# 表示在 圆内 的随机生成的点的数量占 所有随机点(外切正方形内的点) 数量的比例
# 特殊要求: 如果总随机次数小于10000，则主动抛出一个错误


# 创建一个函数，
# 接受一个浮点数，
# 表示圆面积和正方形面积的比值，
# 返回一个浮点数，表示`π`


# 以上函数需要使用类型注释

# 要求用户输入一个正整数
# 如果程序运行出现错误，则让用户重新输入直到计算出结果
# 生成一个随机的x,y坐标点
def random_point():
    """
    生成二维平面上的一个随机点。

    返回:
    一个元组，包含两个0到1之间的随机浮点数。
    """
    return random(), random()

# 判断点是否在单位圆内
def in_round(x:float, y:float):
    """
    判断给定坐标的点是否在单位圆内。

    参数:
    x -- 点的x坐标
    y -- 点的y坐标

    返回:
    布尔值，如果点在单位圆内则返回True，否则返回False。
    """
    return x**2 + y**2 <= 1

# 通过随机点估计圆周率
def pi_estimate(n:int) -> float:
    """
    通过蒙特卡洛方法估计圆周率。

    参数:
    n -- 生成随机点的数量

    返回:
    圆周率的估计值。

    异常:
    ValueError -- 如果n小于10000，则抛出此异常。
    """
    if n < 10000:
        raise ValueError("n must be greater than 10000")  # 确保生成的随机点数量足够多，以获得准确的估计
    count = 0  # 初始化在圆内的点的计数器
    for i in range(n):  # 循环生成n个随机点
        x, y = random_point()  # 生成一个随机点
        if in_round(x, y):  # 检查点是否在圆内
            count += 1  # 如果在圆内，计数器加一
    return count / n  # 返回在圆内的点的比例

# 根据估计的圆周率比例计算圆周率值
def get_pi(ratio: float) -> float:
    """
    根据给定的圆内点的比例计算并返回圆周率的估计值。

    参数:
    ratio -- 圆内点数与总点数的比例

    返回:
    圆周率的估计值。
    """
    return ratio * 4

# __name__是Python中的一个特殊变量，它表示当前模块的名称。
# 如果当前模块被直接运行，而不是被导入，那么__name__的值就是"__main__"。
# 因此，当__name__的值为"__main__"时，说明当前模块被直接运行，而不是被导入。
# 具体关于模块和导入的概念，后面的课程会详细介绍。
# 这里只需要记住 当我们直接运行这个脚本是下面的语句才会被执行
if __name__ == "__main__":
    while True:
        try:
            # 从用户输入获取点的数量
            input_n = int(input("Enter the number of points: "))
            # 使用蒙特卡洛方法估计圆周率，并通过用户输入的数量计算出圆周率的估计值
            pi = get_pi(pi_estimate(input_n))
            break
        except ValueError as e:
            # 如果用户输入不合法，打印错误信息并重新提示用户输入
            print(e)
    # 打印计算得到的圆周率估计值
    print(pi)