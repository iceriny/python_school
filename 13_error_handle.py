# 错误处理 顾名思义，就是当程序运行时，如果出现错误，就会中断运行，然后抛出一个异常。
# 或者如果出现错误时候该怎么办
# 可以理解为一种特殊的 条件判断 语句
# python中的错误处理使用`try...except...else...finally`语句块
# else 和 finally 是可选的

def divide(x, y):
    try:
        result = x / y
    except ZeroDivisionError:
        print("除数不能是0!")
    except TypeError:
        print("错误的操作数类型")
    else:
        print("结果: ", result)
    finally:
        print("无论如何都会执行的一句话")


divide(2, 1)
print("-" * 20)
divide(2, 0)
print("-" * 20)
divide("2", "1")


# `try`后面的语句是可能发生错误的雨具
# `except`是捕获错误，然后执行语句块
# `else`是可选的，如果`try`没有发生错误，则执行`else`语句块
# `finally`是可选的，无论`try`是否发生错误，都会执行`finally`语句块
# `try`语句块后面可以跟任意多个`except`语句块，每个`except`语句块后面可以跟一个参数，这个参数是异常的类型
# 如果没有指定异常类型，则`except`语句块会捕获所有的异常

# 我们可以使用`raise`语句来主动抛出一个异常
def raise_error():
    raise NameError("Hi there")

# raise_error()
# 运行以上方法会抛出一个异常


# 异常处理在编程中是提高程序的健壮性的重要手段
# 能够有效提高代码的`鲁棒性(robustness)`
# tips: 鲁棒性=> 指一个计算机系统在执行过程中处理错误，以及算法在遭遇输入、运算等异常时维持正常运行的能力。
# 你永远不知道你的用户是用什么途径和什么办法使用你的程序，他会输入什么奇奇怪怪的内容都有可能。
# 你测试了一万种情况，但偏偏有一个用户就是输入了在你一万种情况之外的输入，那么...BOOM~ 程序崩溃了 (
'''
有一天，程序员小王自信满满地对同事说：“我的代码无懈可击，我已经考虑了所有可能的输入情况！”
同事笑笑，递给他一杯咖啡，说：“那你应该还没遇到那个能用空白名字注册的用户吧？”

小王不屑一顾，立即现场演示。
输入检验时，程序自信地抛出错误提示：“用户名不能为空！”
正得意间，一个神秘的用户评论飘过：“你好，我叫‘ ”，空气瞬间凝固。
小王的程序面对这看似空白、实则暗藏玄机的用户名，发出了最后的哀鸣——"BOOM~"，随后留下了一个蓝屏的背影和一脸懵的小王。

从此，小王深刻理解了那句话：“在编程的世界里，从不缺少惊喜，只有你想不到的输入。”
'''